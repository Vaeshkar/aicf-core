# AICF-Core Project Context

## PROJECT IDENTITY
**Name:** AICF-Core  
**Purpose:** AI-powered code generation and orchestration system with institutional memory  
**Owner:** Dennis van Leeuwen (@Vaeshkar)  
**Repository:** https://github.com/Vaeshkar/aicf-core  
**Status:** Active Development - AIOB v2.0 Foundation Complete  

## CURRENT SYSTEM STATUS
### ✅ WORKING: AIOB v2.0 Simple Orchestrator
- **Location:** `/aiob-core/src/simple-orchestrator.js`
- **Architecture:** 4-phase sequential workflow
- **AI Models:** Claude 3.5 Sonnet + GPT-4-mini  
- **Proven:** Successfully generates working applications
- **Example:** Todo app (18 files, working API + React frontend)

### 🗄️ ARCHIVED: AIOB v3.0 Complex System  
- **Location:** `/aiob-core/archive/v3-complex-system/`
- **Status:** Over-engineered, preserved for reference
- **Lesson:** Simple working system > complex broken system

## USER PROFILE: Dennis van Leeuwen
- **Background:** Strategist-turned-software-engineer, 25+ years
- **Expertise:** JavaScript, Python, React, Node.js, cloud tooling
- **Preferences:** 
  - Quality over complexity
  - Working solutions over theoretical perfection
  - Cost-efficiency analysis
  - Direct, practical approach
  - Quick, tangible results

## TECHNICAL ARCHITECTURE

### AI Provider Stack
- **Claude 3.5 Sonnet:** Architecture & planning tasks
- **GPT-4-mini:** Implementation & coding tasks  
- **OpenRouter:** Cost-optimized access to models

### Core Components
- **SimpleOrchestrator:** Main project generation engine
- **AICF Context System:** Institutional memory (like Claude SDK's `.claude/`)
- **Multi-Provider Support:** Flexible AI model selection
- **File Management:** Intelligent parsing and creation

### Build Process
1. **Infrastructure Phase:** Project structure + dependencies
2. **Backend Phase:** API server + data models
3. **Frontend Phase:** React UI + styling  
4. **QA Phase:** Testing + validation

## KEY INSIGHTS VALIDATED

### Cost Analysis (Dennis's Hypothesis Confirmed)
- **Premium Strategy:** Claude 3.5 = $0.00063 per quality point
- **Cheap Strategy:** Mixed models = $0.00256 per quality point  
- **Result:** Premium models are 4x more cost-effective
- **Lesson:** Quality models + good prompts > cheap models + iterations

### Architecture Lessons
1. Simple beats complex in practice
2. Working foundation > theoretical perfection  
3. AICF files are valuable institutional memory
4. User feedback critical for relevance

## FUTURE ROADMAP

### Next Phase: Parallel Event-Driven Architecture
Dennis's vision for improved system:
- **Parallel Agents:** Frontend + Backend work simultaneously
- **Event-Driven Stitching:** File watcher triggers connection when parts ready
- **Reactive Flow:** Validation → Debug → Quality → Testing
- **Self-Healing:** Automatic error detection and fixing

### Target Improvements
- Higher complexity projects (beyond basic todo apps)
- Better AI prompting for quality output
- RAG-enhanced context 
- Logic agent integration (free local processing)

## PROJECT STRUCTURE
```
/aicf-core/
├── aicf-core.ai                     # This context file
├── .aicf/                           # Memory context files  
├── aiob-core/                       # Main system
│   ├── src/simple-orchestrator.js   # Working orchestrator
│   ├── archive/v3-complex-system/   # Preserved complex work
│   ├── output/                      # Generated projects
│   └── docs/                        # Analysis & documentation
└── README.md                        # Project documentation
```

## DEVELOPMENT ENVIRONMENT
- **OS:** MacOS
- **Shell:** zsh 5.9  
- **Node.js:** v16.15.1
- **Git:** Active with regular commits
- **Development:** Terminal-based

## CURRENT MILESTONE STATUS
- ✅ **Commit:** b435038 - AICF memory context updated
- ✅ **Previous:** 362c348 - AIOB v2.0 foundation complete
- ✅ **Files:** 167 changed, 67,807 insertions
- ✅ **Tested:** Working todo app generation
- ✅ **Repository:** Up-to-date with origin/main

## NEXT SESSION CONTEXT
When resuming development:
1. Foundation is solid and tested
2. Ready for parallel agent architecture implementation  
3. Focus on higher complexity projects
4. Event-driven stitching concept ready to prototype

## COMMUNICATION NOTES
- Dennis appreciates direct, practical feedback
- Values working demonstrations over theory
- Good at identifying over-engineering  
- Expects quality results that save actual development time
- Prefers step-by-step workflow: .ai/.aicf updates → commit

---
*Last Updated: 2025-10-08T11:18:48Z*  
*Next Phase: Parallel Event-Driven Agent Architecture*